{"dependencies":[{"name":"C:\\Users\\Kayode\\projects\\sp-grp-mem-pnp\\package.json","includedInParent":true,"mtime":1523565871379},{"name":"C:\\Users\\Kayode\\projects\\sp-grp-mem-pnp\\node_modules\\sp-pnp-js\\package.json","includedInParent":true,"mtime":1523565871344}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Reads a blob as text\n *\n * @param blob The data to read\n */\nfunction readBlobAsText(blob) {\n    return readBlobAs(blob, \"string\");\n}\nexports.readBlobAsText = readBlobAsText;\n/**\n * Reads a blob into an array buffer\n *\n * @param blob The data to read\n */\nfunction readBlobAsArrayBuffer(blob) {\n    return readBlobAs(blob, \"buffer\");\n}\nexports.readBlobAsArrayBuffer = readBlobAsArrayBuffer;\n/**\n * Generic method to read blob's content\n *\n * @param blob The data to read\n * @param mode The read mode\n */\nfunction readBlobAs(blob, mode) {\n    return new Promise(function (resolve, reject) {\n        try {\n            var reader = new FileReader();\n            reader.onload = function (e) {\n                resolve(e.target.result);\n            };\n            switch (mode) {\n                case \"string\":\n                    reader.readAsText(blob);\n                    break;\n                case \"buffer\":\n                    reader.readAsArrayBuffer(blob);\n                    break;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n    });\n}\n","map":{"mappings":[{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\sp-pnp-js\\lib\\utils\\files.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}}],"sources":{"node_modules\\sp-pnp-js\\lib\\utils\\files.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Reads a blob as text\n *\n * @param blob The data to read\n */\nfunction readBlobAsText(blob) {\n    return readBlobAs(blob, \"string\");\n}\nexports.readBlobAsText = readBlobAsText;\n/**\n * Reads a blob into an array buffer\n *\n * @param blob The data to read\n */\nfunction readBlobAsArrayBuffer(blob) {\n    return readBlobAs(blob, \"buffer\");\n}\nexports.readBlobAsArrayBuffer = readBlobAsArrayBuffer;\n/**\n * Generic method to read blob's content\n *\n * @param blob The data to read\n * @param mode The read mode\n */\nfunction readBlobAs(blob, mode) {\n    return new Promise(function (resolve, reject) {\n        try {\n            var reader = new FileReader();\n            reader.onload = function (e) {\n                resolve(e.target.result);\n            };\n            switch (mode) {\n                case \"string\":\n                    reader.readAsText(blob);\n                    break;\n                case \"buffer\":\n                    reader.readAsArrayBuffer(blob);\n                    break;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n    });\n}\n"},"lineCount":48}},"hash":"34f74308ec57f380a31bf4dfa8a803c4","cacheData":{"env":{}}}