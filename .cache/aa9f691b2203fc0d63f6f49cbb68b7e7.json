{"dependencies":[{"name":"C:\\Users\\Kayode\\projects\\sp-grp-mem-pnp\\package.json","includedInParent":true,"mtime":1523565340286},{"name":"C:\\Users\\Kayode\\projects\\node_modules\\sp-pnp-js\\package.json","includedInParent":true,"mtime":1523563707687},{"name":"../utils/util","loc":{"line":3,"column":21}},{"name":"../utils/exceptions","loc":{"line":4,"column":27}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"../utils/util\");\nvar exceptions_1 = require(\"../utils/exceptions\");\n/**\n * Makes requests using the SP.RequestExecutor library.\n */\nvar SPRequestExecutorClient = /** @class */ (function () {\n    function SPRequestExecutorClient() {\n        /**\n         * Converts a SharePoint REST API response to a fetch API response.\n         */\n        this.convertToResponse = function (spResponse) {\n            var responseHeaders = new Headers();\n            for (var h in spResponse.headers) {\n                if (spResponse.headers[h]) {\n                    responseHeaders.append(h, spResponse.headers[h]);\n                }\n            }\n            // issue #256, Cannot have an empty string body when creating a Response with status 204\n            var body = spResponse.statusCode === 204 ? null : spResponse.body;\n            return new Response(body, {\n                headers: responseHeaders,\n                status: spResponse.statusCode,\n                statusText: spResponse.statusText,\n            });\n        };\n    }\n    /**\n     * Fetches a URL using the SP.RequestExecutor library.\n     */\n    SPRequestExecutorClient.prototype.fetch = function (url, options) {\n        var _this = this;\n        if (typeof SP === \"undefined\" || typeof SP.RequestExecutor === \"undefined\") {\n            throw new exceptions_1.SPRequestExecutorUndefinedException();\n        }\n        var addinWebUrl = url.substring(0, url.indexOf(\"/_api\")), executor = new SP.RequestExecutor(addinWebUrl);\n        var headers = {}, iterator, temp;\n        if (options.headers && options.headers instanceof Headers) {\n            iterator = options.headers.entries();\n            temp = iterator.next();\n            while (!temp.done) {\n                headers[temp.value[0]] = temp.value[1];\n                temp = iterator.next();\n            }\n        }\n        else {\n            headers = options.headers;\n        }\n        // this is a way to determine if we need to set the binaryStringRequestBody by testing what method we are calling\n        // and if they would normally have a binary body. This addresses issue #565.\n        var paths = [\n            \"files\\/add\",\n            \"files\\/addTemplateFile\",\n            \"file\\/startUpload\",\n            \"file\\/continueUpload\",\n            \"file\\/finishUpload\",\n            \"attachmentfiles\\/add\",\n        ];\n        var isBinaryRequest = (new RegExp(paths.join(\"|\"), \"i\")).test(url);\n        return new Promise(function (resolve, reject) {\n            var requestOptions = {\n                error: function (error) {\n                    reject(_this.convertToResponse(error));\n                },\n                headers: headers,\n                method: options.method,\n                success: function (response) {\n                    resolve(_this.convertToResponse(response));\n                },\n                url: url,\n            };\n            if (options.body) {\n                requestOptions = util_1.Util.extend(requestOptions, { body: options.body });\n                if (isBinaryRequest) {\n                    requestOptions = util_1.Util.extend(requestOptions, { binaryStringRequestBody: true });\n                }\n            }\n            executor.executeAsync(requestOptions);\n        });\n    };\n    return SPRequestExecutorClient;\n}());\nexports.SPRequestExecutorClient = SPRequestExecutorClient;\n","map":{"mappings":[{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}}],"sources":{"..\\node_modules\\sp-pnp-js\\lib\\net\\sprequestexecutorclient.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"../utils/util\");\nvar exceptions_1 = require(\"../utils/exceptions\");\n/**\n * Makes requests using the SP.RequestExecutor library.\n */\nvar SPRequestExecutorClient = /** @class */ (function () {\n    function SPRequestExecutorClient() {\n        /**\n         * Converts a SharePoint REST API response to a fetch API response.\n         */\n        this.convertToResponse = function (spResponse) {\n            var responseHeaders = new Headers();\n            for (var h in spResponse.headers) {\n                if (spResponse.headers[h]) {\n                    responseHeaders.append(h, spResponse.headers[h]);\n                }\n            }\n            // issue #256, Cannot have an empty string body when creating a Response with status 204\n            var body = spResponse.statusCode === 204 ? null : spResponse.body;\n            return new Response(body, {\n                headers: responseHeaders,\n                status: spResponse.statusCode,\n                statusText: spResponse.statusText,\n            });\n        };\n    }\n    /**\n     * Fetches a URL using the SP.RequestExecutor library.\n     */\n    SPRequestExecutorClient.prototype.fetch = function (url, options) {\n        var _this = this;\n        if (typeof SP === \"undefined\" || typeof SP.RequestExecutor === \"undefined\") {\n            throw new exceptions_1.SPRequestExecutorUndefinedException();\n        }\n        var addinWebUrl = url.substring(0, url.indexOf(\"/_api\")), executor = new SP.RequestExecutor(addinWebUrl);\n        var headers = {}, iterator, temp;\n        if (options.headers && options.headers instanceof Headers) {\n            iterator = options.headers.entries();\n            temp = iterator.next();\n            while (!temp.done) {\n                headers[temp.value[0]] = temp.value[1];\n                temp = iterator.next();\n            }\n        }\n        else {\n            headers = options.headers;\n        }\n        // this is a way to determine if we need to set the binaryStringRequestBody by testing what method we are calling\n        // and if they would normally have a binary body. This addresses issue #565.\n        var paths = [\n            \"files\\/add\",\n            \"files\\/addTemplateFile\",\n            \"file\\/startUpload\",\n            \"file\\/continueUpload\",\n            \"file\\/finishUpload\",\n            \"attachmentfiles\\/add\",\n        ];\n        var isBinaryRequest = (new RegExp(paths.join(\"|\"), \"i\")).test(url);\n        return new Promise(function (resolve, reject) {\n            var requestOptions = {\n                error: function (error) {\n                    reject(_this.convertToResponse(error));\n                },\n                headers: headers,\n                method: options.method,\n                success: function (response) {\n                    resolve(_this.convertToResponse(response));\n                },\n                url: url,\n            };\n            if (options.body) {\n                requestOptions = util_1.Util.extend(requestOptions, { body: options.body });\n                if (isBinaryRequest) {\n                    requestOptions = util_1.Util.extend(requestOptions, { binaryStringRequestBody: true });\n                }\n            }\n            executor.executeAsync(requestOptions);\n        });\n    };\n    return SPRequestExecutorClient;\n}());\nexports.SPRequestExecutorClient = SPRequestExecutorClient;\n"},"lineCount":85}},"hash":"1b98cee430c9ac0edc54b8e81681c392","cacheData":{"env":{}}}